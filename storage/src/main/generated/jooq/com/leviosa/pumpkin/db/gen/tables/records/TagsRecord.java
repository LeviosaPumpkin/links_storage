/*
 * This file is generated by jOOQ.
 */
package com.leviosa.pumpkin.db.gen.tables.records;


import com.leviosa.pumpkin.db.gen.tables.Tags;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagsRecord extends UpdatableRecordImpl<TagsRecord> implements Record3<Long, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>links_storage.tags.tag_id</code>.
     */
    public void setTagId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>links_storage.tags.tag_id</code>.
     */
    public Long getTagId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>links_storage.tags.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>links_storage.tags.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>links_storage.tags.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>links_storage.tags.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tags.TAGS.TAG_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Tags.TAGS.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Tags.TAGS.NAME;
    }

    @Override
    public Long component1() {
        return getTagId();
    }

    @Override
    public Integer component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long value1() {
        return getTagId();
    }

    @Override
    public Integer value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public TagsRecord value1(Long value) {
        setTagId(value);
        return this;
    }

    @Override
    public TagsRecord value2(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public TagsRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagsRecord values(Long value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagsRecord
     */
    public TagsRecord() {
        super(Tags.TAGS);
    }

    /**
     * Create a detached, initialised TagsRecord
     */
    public TagsRecord(Long tagId, Integer userId, String name) {
        super(Tags.TAGS);

        setTagId(tagId);
        setUserId(userId);
        setName(name);
    }
}
